# STEPS LEVEL TEMPLATE:
# Used to build XPlatCppSdk
# Reusable
# Used to "hide" the additional variables specific to this SDK which shouldn't be set from a higher level, or
#   shared from a multi-build pipeline like a publish

parameters:
- name: ApiSpecSource
  displayName: ApiSpecSource
  type: string
  default: -apiSpecGitUrl https://raw.githubusercontent.com/PlayFab/API_Specs/master/
- name: CommitMessage
  displayName: CommitMessage
  type: string
  default: Automated build from ADO Pipeline
- name: GitDestBranch
  displayName: GitDestBranch
  type: string
  default: doNotCommit
- name: SdkName
  displayName: SdkName
  type: string
  default: XPlatCppSdk
- name: isVersioned
  displayName: isVersioned
  type: boolean
  default: false
- name: SelfTemplateResource
  displayName: SelfTemplateResource
  type: string
  default: self

steps:
- checkout: JenkinsSdkSetupScripts
  clean: true
  path: s
- checkout: API_Specs
  clean: true
  path: s/API_Specs
- checkout: SdkGenerator
  clean: true
  path: s/SdkGenerator
- checkout: ${{ parameters.SelfTemplateResource }}
  clean: true
  path: s/SdkGenerator/privateTemplates/XPlatCoreTemplate
- checkout: XPlatCppSdk
  clean: true
  submodules: true
  path: s/sdks/XPlatCppSdk
  persistCredentials: true
- bash: |
    set -e
    echo alias the ADO variables into local variables
    ApiSpecSource="${{ parameters.ApiSpecSource }}"
    CommitMessage="${{ parameters.CommitMessage }}"
    GitDestBranch="${{ parameters.GitDestBranch }}"
    SdkName="${{ parameters.SdkName }}"
    WORKSPACE=$(pwd)
    export WORKSPACE="$WORKSPACE"

    cd "$WORKSPACE/SDKGenerator/SDKBuildScripts"
    . ./shared_build.sh

    cd "$WORKSPACE/sdks/$SdkName"
    if [ -f set-gitmodules.bat ] ;
    then
      echo set-gitmodules.bat file detected, running it...
      cmd <<< call set-gitmodules.bat
    fi

    cd "$WORKSPACE/SDKGenerator/SDKBuildScripts"
    export PF_TEST_TITLE_DATA_JSON="$WORKSPACE/JenkinsSdkSetupScripts/Creds/testTitleData.json"

    . "$WORKSPACE/JenkinsSdkSetupScripts/JenkinsScripts/Pipeline/util.sh"

    cd "$WORKSPACE/sdks/$SdkName/build/iOS/"
    echo === list possible workspaces for logging purposes ===
    xcodebuild -list -workspace XPlatCppIOS.xcworkspace

    echo === Build the XPlatCpp Project for IOS === 
    xcodebuild -scheme lib_json build
    xcodebuild -scheme XPlatCppIOS build
    xcodebuild -scheme TestIOSApp_Debug build
    
    echo === Test the Cpp Project ===
    mkdir MyOutput
    xcodebuild test -workspace XPlatCppIOS.xcworkspace -destination MyOutput

    . "$WORKSPACE/JenkinsSdkSetupScripts/JenkinsScripts/Pipeline/sdkUtil.sh"
    ListenCsJCU

    if [ $isVersioned = "True" ] ;
    then
      echo consider packaging for nuget or vcpack
    fi
  displayName: 'Build/Test/Report'
- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '*.xml'
    testRunTitle: CppTemplate
