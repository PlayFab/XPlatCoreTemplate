#pragma once

#include <playfab/PlayFabBaseModel.h>
#include <playfab/PlayFabJsonHeaders.h>

namespace PlayFab
{
    enum class PlayFabErrorCode
    {
        PlayFabErrorHostnameNotFound = 1,
        PlayFabErrorConnectionTimeout,
        PlayFabErrorConnectionRefused,
        PlayFabErrorSocketError,
<% for (errIdx in apis[0].errors) { var apiErr = apis[0].errors[errIdx];
%>        PlayFabError<%- apiErr.name %> = <%- apiErr.id %>,
<% }
%>    };

    /// <summary>
    /// The wrapper around all PlayFab responses, and all fields needed in the case of an error
    /// </summary>
    struct PlayFabError : public PlayFabBaseModel
    {
        // Serialized fields
        int HttpCode;
        std::string HttpStatus;
        PlayFabErrorCode ErrorCode;
        std::string ErrorName;
        std::string ErrorMessage;
        Json::Value ErrorDetails;
        Json::Value Data;
        std::string RequestId;
        // Non-serialized fields
        std::string UrlPath;
        Json::Value Request;

        void FromJson(const Json::Value& input) override;
        Json::Value ToJson() const override;

        std::string GenerateErrorReport() const;
    };

    typedef std::function<void(const PlayFabError& error, void* customData)> ErrorCallback;
    typedef std::function<void(std::exception exception)> ExceptionCallback;

    enum class PlayFabExceptionCode
    {
        AuthContextRequired,
        DeveloperKeyNotSet,
        EntityTokenNotSet,
        NotLoggedIn,
        PluginAmbiguity,
        PluginNotFound,
        ThreadMisuse,
        TitleNotSet,
    };

    class PlayFabException : public std::runtime_error
    {
    public:
        PlayFabException() = delete;
        PlayFabException(const PlayFabException& source) = delete;
        PlayFabException(PlayFabException&&) = default;
        PlayFabException& operator=(const PlayFabException& source) = delete;
        PlayFabException& operator=(PlayFabException&& other) = delete;

        PlayFabExceptionCode Code;
        PlayFabException(PlayFabExceptionCode code, const char* const message);
    };
}
