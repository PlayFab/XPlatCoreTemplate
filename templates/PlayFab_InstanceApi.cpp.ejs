#include <stdafx.h>

<%- getApiDefine(api) %>

#include <playfab/PlayFab<%- api.name %>InstanceApi.h>
#include <playfab/PlayFabPluginManager.h>
#include <playfab/PlayFabSettings.h>
#include <playfab/PlayFabError.h>
#include <memory>

#if defined(PLAYFAB_PLATFORM_WINDOWS)
#pragma warning (disable: 4100) // formal parameters are part of a public interface
#endif // defined(PLAYFAB_PLATFORM_WINDOWS)

namespace PlayFab
{
    using namespace <%- api.name %>Models;

    PlayFab<%- api.name %>InstanceAPI::PlayFab<%- api.name %>InstanceAPI()
    {
    }

    PlayFab<%- api.name %>InstanceAPI::PlayFab<%- api.name %>InstanceAPI(std::shared_ptr<PlayFabApiSettings> apiSettings)
    {
        this->settings = std::move(apiSettings);
    }

    PlayFab<%- api.name %>InstanceAPI::PlayFab<%- api.name %>InstanceAPI(std::shared_ptr<PlayFabAuthenticationContext> authenticationContext)
    {
        this->authContext = std::move(authenticationContext);
    }

    PlayFab<%- api.name %>InstanceAPI::PlayFab<%- api.name %>InstanceAPI(std::shared_ptr<PlayFabApiSettings> apiSettings, std::shared_ptr<PlayFabAuthenticationContext> authenticationContext)
    {
        this->settings = std::move(apiSettings);
        this->authContext = std::move(authenticationContext);
    }

    PlayFab<%- api.name %>InstanceAPI::~PlayFab<%- api.name %>InstanceAPI()
    {
    }

    std::shared_ptr<PlayFabApiSettings> PlayFab<%- api.name %>InstanceAPI::GetSettings() const
    {
        return this->settings;
    }

    void PlayFab<%- api.name %>InstanceAPI::SetSettings(std::shared_ptr<PlayFabApiSettings> apiSettings)
    {
        this->settings = std::move(apiSettings);
    }

    std::shared_ptr<PlayFabAuthenticationContext> PlayFab<%- api.name %>InstanceAPI::GetAuthenticationContext() const
    {
        return this->authContext;
    }

    void PlayFab<%- api.name %>InstanceAPI::SetAuthenticationContext(std::shared_ptr<PlayFabAuthenticationContext> authenticationContext)
    {
        this->authContext = std::move(authenticationContext);
    }

    std::shared_ptr<PlayFabAuthenticationContext> PlayFab<%- api.name %>InstanceAPI::GetOrCreateAuthenticationContext()
    {
        if (this->authContext == nullptr)
        {
            this->authContext = std::make_shared<PlayFabAuthenticationContext>();
        }
        
        return this->authContext;
    }

    size_t PlayFab<%- api.name %>InstanceAPI::Update()
    {
        IPlayFabHttpPlugin& http = *PlayFabPluginManager::GetPlugin<IPlayFabHttpPlugin>(PlayFabPluginContract::PlayFab_Transport);
        return http.Update();
    }

    void PlayFab<%- api.name %>InstanceAPI::ForgetAllCredentials()
    {
        if (this->authContext == nullptr)
            return;

        this->authContext->ForgetAllCredentials();
    }

    // PlayFab<%- api.name %> instance APIs
<% for (var callIdx = 0; callIdx < api.calls.length; callIdx++) { var apiCall = api.calls[callIdx]; %>
    void PlayFab<%- api.name %>InstanceAPI::<%- apiCall.name %>(
        <%- apiCall.request %>& request,
        const ProcessApiCallback<<%- apiCall.result %>> callback,
        const ErrorCallback errorCallback,
        void* customData
    )
    {
<%- getRequestActions("        ", apiCall, true) %>
        IPlayFabHttpPlugin& http = *PlayFabPluginManager::GetPlugin<IPlayFabHttpPlugin>(PlayFabPluginContract::PlayFab_Transport);
        const Json::Value requestJson = request.ToJson();
        std::string jsonAsString = requestJson.toStyledString();

        std::shared_ptr<PlayFabAuthenticationContext> authenticationContext = request.authenticationContext == nullptr ? this->GetOrCreateAuthenticationContext() : request.authenticationContext;
        std::unordered_map<std::string, std::string> headers;
        headers.emplace(<%- getAuthParams(apiCall, true) %>);

        auto reqContainer = std::unique_ptr<CallRequestContainer>(new CallRequestContainer(
            "<%- apiCall.url %>",
            headers,
            jsonAsString,
            std::bind(&PlayFab<%- api.name %>InstanceAPI::On<%- apiCall.name %>Result, this, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3),
            customData,
            this->settings));

        reqContainer->successCallback = std::shared_ptr<void>((callback == nullptr) ? nullptr : new ProcessApiCallback<<%- apiCall.result %>>(callback));
        reqContainer->errorCallback = errorCallback;

        if (PlayFabSettings::ValidateSettings(authenticationContext, this->settings, *reqContainer))
        {
            http.MakePostRequest(std::unique_ptr<CallRequestContainerBase>(static_cast<CallRequestContainerBase*>(reqContainer.release())));
        }
    }

    void PlayFab<%- api.name %>InstanceAPI::On<%- apiCall.name %>Result(int httpCode, const std::string& result, const std::shared_ptr<CallRequestContainerBase>& reqContainer)
    {
        CallRequestContainer& container = static_cast<CallRequestContainer&>(*reqContainer);

        <%- apiCall.result %> outResult;
        if (ValidateResult(outResult, container))
        {
<%- getResultActions("            ", apiCall, true) %>
            std::shared_ptr<void> internalPtr = container.successCallback;
            if (internalPtr.get() != nullptr)
            {
                const auto& callback = *static_cast<ProcessApiCallback<<%- apiCall.result %>> *>(internalPtr.get());
                callback(outResult, container.GetCustomData());
            }
        }
    }
<% } %><% if (hasClientOptions) { %>
    // Private PlayFabClientInstanceAPI specific
    bool PlayFabClientInstanceAPI::IsClientLoggedIn()
    {
        return !this->GetOrCreateAuthenticationContext()->clientSessionTicket.empty();
    }

    void PlayFabClientInstanceAPI::MultiStepClientLogin(bool needsAttribution)
    {
        std::shared_ptr<PlayFab::PlayFabApiSettings> apiSettings = this->GetSettings();
        if (apiSettings == nullptr)
        {
            if (needsAttribution && !PlayFabSettings::disableAdvertising && PlayFabSettings::advertisingIdType.length() > 0 && PlayFabSettings::advertisingIdValue.length() > 0)
            {
                AttributeInstallRequest request;
                if (PlayFabSettings::advertisingIdType == PlayFabSettings::AD_TYPE_IDFA)
                    request.Idfa = PlayFabSettings::advertisingIdValue;
                else if (PlayFabSettings::advertisingIdType == PlayFabSettings::AD_TYPE_ANDROID_ID)
                    request.Adid = PlayFabSettings::advertisingIdValue;
                else
                    return;
                AttributeInstall(request, nullptr, nullptr);
            }
        }
        else
        {
            if (needsAttribution && !apiSettings->disableAdvertising && apiSettings->advertisingIdType.length() > 0 && apiSettings->advertisingIdValue.length() > 0)
            {
                AttributeInstallRequest request;
                if (apiSettings->advertisingIdType == PlayFabSettings::AD_TYPE_IDFA)
                    request.Idfa = apiSettings->advertisingIdValue;
                else if (apiSettings->advertisingIdType == PlayFabSettings::AD_TYPE_ANDROID_ID)
                    request.Adid = apiSettings->advertisingIdValue;
                else
                    return;
                AttributeInstall(request, nullptr, nullptr);
            }
        }
    }
<% } %>
    bool PlayFab<%- api.name %>InstanceAPI::ValidateResult(PlayFabResultCommon& resultCommon, const CallRequestContainer& container)
    {
        if (container.errorWrapper.HttpCode == 200)
        {
            resultCommon.FromJson(container.errorWrapper.Data);
            resultCommon.Request = container.errorWrapper.Request;
            return true;
        }
        else // Process the error case
        {
            if (PlayFabSettings::globalErrorHandler != nullptr)
                PlayFabSettings::globalErrorHandler(container.errorWrapper, container.GetCustomData());
            if (container.errorCallback != nullptr)
                container.errorCallback(container.errorWrapper, container.GetCustomData());
            return false;
        }
    }
}

#endif

#if defined(PLAYFAB_PLATFORM_WINDOWS)
#pragma warning (default: 4100) // formal parameters are part of a public interface
#endif // defined(PLAYFAB_PLATFORM_WINDOWS)
